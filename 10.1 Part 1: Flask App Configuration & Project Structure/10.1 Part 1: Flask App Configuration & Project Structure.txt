-> scaling up: configs, application factory, and blueprints lesson
  -> part 1: flask app configuration & project structure

-> introduction
  -> this lesson introduces the process of organising a flask project into a more modular structure, which is essential for scalability and maintainability in larger applications
  -> after completing this part, continue to the next sections of the series, which cover the use of configuration classes, application factories, and blueprints to optimise flask project structure

-> flask app configuration features
  -> while flask is known for its simplicity and flexibility, projects can become difficult to maintain as they grow in size
  -> flask provides several powerful features to help structure and organise your application as it expands:
    -> configurations: manage app settings (e.g., database uris, security keys)
    -> blueprints: modularise different parts of your application into reusable components
    -> application factories: dynamically create and configure the app instance

-> why go modular?
  -> breaking your project into modular components brings several benefits:
    -> maintainability: a modular structure allows you to locate and modify individual parts of the project without affecting other areas
    -> scalability: as your app grows, you can add new features without worrying about how they will impact the rest of the project
    -> collaboration: team members can work on separate modules without interfering with each other’s work
    -> testing: isolate different modules for focused, precise testing
    -> understandability: a modular structure makes it easier to understand how the different components of your app fit together
    -> debugging: errors and bugs are easier to track down and fix because the codebase is more understandable
    -> documentation: it is easier to write clear, targeted documentation for individual components rather than trying to document the entire project at once
  -> however, while modularity is advantageous, be cautious of over-engineering, especially for smaller projects where a more straightforward structure may be sufficient

-> flask file and folder structure
  -> to make use of the modularity features of flask, you need to adopt a folder structure that supports this flexibility. here’s an example of a typical flask project structure:
    ```plaintext
    flask-webdev/
    ├───app/
    │ ├── main/
    │ │ ├── __init__.py
    │ │ ├── errors.py
    │ │ ├── forms.py
    │ │ └── views.py
    │ ├── static/
    │ ├── templates/
    │ │ ├── base.html
    │ │ ├── error.html
    │ │ ├── index.html
    │ │ └── user.html
    │ ├── __init__.py
    │ └── models.py
    ├── env/
    ├── migrations/
    ├── config.py
    ├── ragtime.py
    └── requirements.txt
    ```
  -> app/: this folder holds your application’s core components. it is treated as a python package, with an __init__.py file to allow python to recognise the directory as a module
  -> main/: this submodule holds your main application logic, such as views, forms, error handling, and other core components
  -> static/ and templates/: these folders contain your static assets (e.g., images, stylesheets) and html templates, respectively
  -> migrations/: holds database migration scripts
  -> env/: the directory containing your virtual environment for managing project dependencies
  -> config.py: the file that contains configuration settings for your app (more on this below)
  -> ragtime.py: manages database migrations (alternative to flask-migrate)
  -> requirements.txt: lists the required python packages for your project

-> creating a flask class
  -> once you have the right file and folder structure in place, you can start configuring your flask app
  -> the configuration settings include important values such as:
    -> database settings (e.g., uri for connecting to the database)
    -> security settings (e.g., secret keys for session management)
    -> debugging settings (e.g., whether to enable debug mode)
    -> logging settings (e.g., how to handle app logs)
  -> flask makes it easy to manage these settings by using a class-based approach for configuration

-> configuration class example
  -> in flask, the configuration settings are typically placed within a configuration class. here's an example of how this might look in a config.py file:
    ```python
    import os
    basedir = os.path.abspath(os.path.dirname(__file__))
    class Config():
      SECRET_KEY = "keep it secret, keep it safe"
      SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'data-dev.sqlite')
      SQLALCHEMY_TRACK_MODIFICATIONS = False
      @staticmethod
      def init_app(app):
        pass
    config = {'default': Config}
    ```
  -> explanation:
    -> secret_key: a secret key for securing flask sessions
    -> sqlalchemy_database_uri: the uri for the app’s database (in this case, a sqlite database)
    -> sqlalchemy_track_modifications: a setting to disable flask-sqlalchemy’s modification tracking (useful for performance)
    -> init_app(): this is a static method that flask expects in configuration classes for initialisation tasks. although the method is currently empty, it can be used for setting up app-related configuration (like setting up extensions or database connections)
    -> config dictionary: this holds references to configuration classes. even though only one class exists here (config), this dictionary makes it easy to add additional configuration classes later for different environments (e.g., development, testing, production)

-> extending config class
  -> one of the advantages of using a class for configuration is that it can easily be extended. for example, if you need different settings for production and development environments, you can create new classes that inherit from the base config class and override specific settings:
    ```python
    class DevelopmentConfig(Config):
      DEBUG = True
      SQLALCHEMY_DATABASE_URI = 'sqlite:///dev.db'

    class ProductionConfig(Config):
      DEBUG = False
      SQLALCHEMY_DATABASE_URI = 'mysql://user@localhost/prod_db'
    ```
  -> this approach allows you to keep a clean separation between environments, while reusing common configuration settings (like the secret_key)

-> summary: flask app configuration & project structure
  -> in this lesson, you:
    -> understood the limitations of using a single file for larger flask projects
    -> learned how to organise your project with a modular structure, including how to separate core app components and configuration settings
    -> discovered how to define and use configuration classes in a separate file to manage settings in a more scalable way
  -> these principles set the foundation for the next parts of the series, where you will explore application factories and blueprints, which will help you tie everything together and make your flask project even more modular