-> Creating and Using a Configuration File in Flask
    -> Overview of Configuration in Flask
        -> In Flask, configuration settings define how the application behaves, such as database connections, secret keys, and debugging settings
        -> Storing configuration settings in a dedicated configuration file separates the application logic from environment-specific settings, allowing for cleaner code and better maintainability
        -> This modular approach makes it easy to manage different configurations for different environments (development, production, etc.) without hardcoding settings in the main application logic

    -> Why Use a Configuration File
        -> When an app grows in complexity, it’s essential to keep settings out of the main application files to improve code readability and modularity
        -> A configuration file helps with:
            -> Organising the app's settings
            -> Avoiding the repetition of configuration settings
            -> Easily managing different configurations for various environments
        -> By moving configuration settings to a dedicated file (e.g., `config.py`), we ensure a clear separation between logic and configuration, allowing for more manageable and scalable applications

    -> Moving Configuration Objects to `config.py`
        -> First, take the configuration objects previously defined in `app.py` (or other primary files) and transfer them to a new file called `config.py`
        -> This makes the app's configuration modular and keeps the application logic in one file and the settings in another, allowing for better scalability and easier maintenance
        -> With `config.py`, you centralise all configuration settings in one place, making them easy to access and modify without sifting through the main application logic

    -> Defining Configuration Settings in `config.py`
        -> In `config.py`, we define a configuration class that holds the configuration settings as class variables
        -> Each class variable represents a different configuration setting (e.g., `DATABASE_URI`, `SECRET_KEY`, etc.)
        -> Using a class helps organise related configuration settings under a single object, which keeps the code structured and easy to navigate
        -> Example of defining a simple configuration class:
            ```python
            class Config:
                DATABASE_URI = 'sqlite:///app.db'
                SECRET_KEY = 'supersecretkey'
                DEBUG = True
            ```
        -> In this example, we define the URI for the database connection, a secret key for secure sessions, and enable the debug mode

    -> Benefits of Using Classes for Configuration
        -> Grouping related configuration settings in a class allows for better organisation and readability
        -> You can add new settings or modify existing ones more easily because the configuration is centralised
        -> Classes also enable the use of static methods or class methods to manage configuration more flexibly, such as initialising the application with specific settings

    -> Setting Up the `init_app` Method
        -> The `init_app` method inside the configuration class is used to initialise the Flask application instance with the configuration settings
        -> The method accepts the Flask app object as a parameter and uses the `app.config.from_object()` method to load the settings from the configuration class into the app
        -> This makes it easier to set up your app with configuration settings that can be easily accessed across the app
        -> The `init_app` method simplifies setting configurations, making it easier to manage and load configuration settings programmatically
        -> Example of an `init_app` method:
            ```python
            class Config:
                DATABASE_URI = 'sqlite:///app.db'
                SECRET_KEY = 'supersecretkey'
                @staticmethod
                def init_app(app):
                    app.config.from_object(Config)
            ```

    -> Why Use `app.config.from_object()`
        -> The `app.config.from_object()` method is a Flask utility that loads configuration variables from a Python object, such as a class, into the app's configuration
        -> This is beneficial because it makes it easy to reference the configuration class directly, rather than setting each variable manually
        -> It is a clean, reusable way to manage configurations across different environments, and it simplifies loading different settings for multiple instances of the application

    -> Handling Environment-Specific Configuration with OS Module
        -> The `os` module is used to manage environment-specific configuration settings, such as production or development configurations
        -> Environment variables (set outside the application, e.g., in the operating system or cloud hosting services) are often used to securely manage sensitive information like database URIs and secret keys
        -> By using `os.getenv()`, you can load different configurations based on the environment in which the app is running
        -> Example of using environment variables in the configuration:
            ```python
            import os
            class Config:
                DATABASE_URI = os.getenv('DATABASE_URI', 'sqlite:///default.db')  # Fallback to default if not set
                SECRET_KEY = os.getenv('SECRET_KEY', 'default_secret_key')
            ```
        -> This approach ensures that sensitive data (like secret keys or database credentials) are not hardcoded into the source code and can be securely stored in the environment

    -> Managing Different Configurations for Different Environments
        -> Often, you'll want different settings for different environments (e.g., development, production, testing)
        -> You can easily manage this by creating separate configuration classes for each environment and loading the appropriate configuration based on the current environment
        -> Example of different configuration classes for different environments:
            ```python
            class DevelopmentConfig(Config):
                DATABASE_URI = 'sqlite:///dev.db'
                DEBUG = True

            class ProductionConfig(Config):
                DATABASE_URI = os.getenv('DATABASE_URI', 'postgresql://user@localhost/prod_db')
                DEBUG = False
            ```
        -> Depending on the environment, you can load the appropriate configuration in the Flask app:
            ```python
            app.config.from_object('config.DevelopmentConfig')  # For development
            app.config.from_object('config.ProductionConfig')   # For production
            ```

    -> Benefits of Using a Configuration File in Flask
        -> Centralises configuration management: Having a single configuration file or module (`config.py`) keeps all app settings in one place, making it easier to maintain and update
        -> Environment-specific settings: By using environment variables and loading configuration settings dynamically, you can easily switch between different configurations for different environments (e.g., development, production)
        -> Security: Sensitive data, such as API keys, database URIs, and secret keys, can be securely stored using environment variables and not hardcoded in the source code, improving the security of the app
        -> Maintainability: Configuration settings are now separate from the main application logic, making it easier to change settings without touching the core logic or needing to redeploy the entire application

    -> Conclusion
        -> By creating a configuration file (`config.py`) and using the `init_app` method to load settings, you improve the organisation, security, and flexibility of your Flask application
        -> The `from_object()` method simplifies loading configuration settings into the app, making the code cleaner and easier to maintain
        -> The use of the `os` module for environment-specific settings allows you to manage your application’s configuration securely and efficiently, especially when deploying to various environments like development, production, or testing
