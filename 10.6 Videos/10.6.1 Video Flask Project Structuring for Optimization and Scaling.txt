-> Restructuring Flask Project for Scalability
    -> Objective: Organise the Flask project to make it easier to maintain and scale as the application grows
        -> Flask projects can become hard to manage as they grow in complexity
        -> Structuring the project in a modular way helps you maintain and expand the app with ease
        -> A good project structure improves code readability, reusability, and reduces clutter in your codebase

    -> Creating the App Folder
        -> The top-level directory of your project should contain a folder called `app`
            -> This will serve as the root directory for your Flask application
        -> The `app` folder will house all of your app’s components, such as routes, models, templates, and static files
        -> Organising your project into an `app` folder follows a common convention and provides a scalable structure for growth
        -> This keeps your application logic separate from configuration and other files at the root level of your project

    -> Creating the Configuration File
        -> Inside the `app` folder, create a configuration file, usually named `config.py`, where you’ll define the app settings
            -> The config file helps manage your app’s configuration in one place
            -> It can hold sensitive data like secret keys, API keys, and database connection settings
        -> In `config.py`, initialise the Flask application instance using `Flask(__name__)`
        -> You can configure the app’s settings (e.g., debugging, testing, secret keys) in the configuration file
        -> You may use environment variables to switch between development, testing, and production configurations
        -> Example of `config.py`:
            ```python
            import os
            class Config:
                SECRET_KEY = os.environ.get('SECRET_KEY') or 'default-secret-key'
                SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///app.db'
                SQLALCHEMY_TRACK_MODIFICATIONS = False
            ```

    -> Setting Up the Models Folder
        -> The `models` folder inside `app` will store all of your database models
            -> A model represents a table in the database, mapping attributes to columns
            -> In larger applications, separating models into their own folder helps keep the codebase organised and manageable
        -> Each model should be defined in its own Python file inside the `models` folder
            -> This keeps the database logic modular and allows easy scaling as your application’s data model grows
        -> Example of `models/user.py`:
            ```python
            from app import db

            class User(db.Model):
                id = db.Column(db.Integer, primary_key=True)
                username = db.Column(db.String(80), unique=True, nullable=False)
                email = db.Column(db.String(120), unique=True, nullable=False)
            ```
        -> Import these models into your main app file or views to interact with the database

    -> Setting Up the Static Folder
        -> Create a `static` folder inside the `app` folder to store all your static files
            -> Static files include assets like:
                -> CSS files for styling
                -> JavaScript files for dynamic behaviour
                -> Image files used throughout the site (e.g., logos, backgrounds)
        -> Flask automatically serves files from the `static` folder by default, making it easy to link static resources in your templates
        -> Example structure of the `static` folder:
            ```plaintext
            /static
                /css
                    style.css
                /js
                    script.js
                /images
                    logo.png
            ```

    -> Creating the Templates Folder
        -> The `templates` folder inside `app` will store all of your HTML files
            -> Flask will automatically look in this folder when rendering templates using the `render_template` function
        -> Organise your HTML files in this folder for easy management
            -> You can create different templates for different pages and even use inheritance to reuse common sections (e.g., headers, footers)
        -> Example structure of the `templates` folder:
            ```plaintext
            /templates
                index.html
                user.html
                layout.html  (base template with shared elements like header/footer)
            ```

    -> Using Git for Version Control
        -> When restructuring your project, Git is essential to maintain a clean commit history
        -> If you’ve already committed some code, use Git to track the changes during the restructuring process
            -> Create a new branch or use a new commit to move your files into the new structure
            -> This keeps your history intact, allowing you to revert changes if necessary without losing earlier work
        -> Steps to restructure with Git:
            1. Create the new `app` folder and move existing files into their new locations
            2. Commit the changes to your Git repository
            3. If necessary, use Git to track and push the restructuring to your remote repository
            4. Ensure that all previous commits remain intact, allowing you to work on the project more effectively

    -> Ensuring Proper Linking of Routes, Templates, and Models
        -> After the restructure, you must ensure that routes, models, and templates are properly linked to the new file structure
        -> Update your `import` statements to reflect the new folder paths:
            -> If a route is using a model from the `models` folder, update the import to:
                ```python
                from app.models.user import User
                ```
            -> Ensure routes and view functions correctly render templates from the `templates` folder:
                ```python
                return render_template('user.html', username=username)
                ```
            -> Check that any static file references (like CSS or JavaScript) are correctly linked to the `static` folder:
                ```html
                <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
                ```
        -> Running the app after the restructuring will verify that everything works correctly

    -> Scalability Benefits of Restructuring
        -> With the new structure, it’s easier to scale your project as your app grows
        -> You can:
            -> Add more models (e.g., for new features or data structures) without cluttering your main app file
            -> Easily add new static files (e.g., for new styling or functionality) without running into file organisation issues
            -> Manage multiple templates with clear separation of concerns (e.g., separate templates for different parts of the site)
        -> As your app grows, you’ll be able to:
            -> Add a `services` folder for reusable application logic
            -> Create blueprints to modularise parts of your app (e.g., user management, authentication)
            -> Introduce a `tests` folder for unit tests to ensure everything works as expected

    -> Conclusion
        -> By restructuring your project into an organised folder structure, your Flask app will be easier to maintain, expand, and scale
        -> The modular structure ensures each component of the app (routes, templates, models, static files) has its own place, improving organisation
        -> Proper structure will also make it easier for other developers to contribute to the project or for you to revisit it in the future
        -> The changes introduced in this video will set the stage for further growth of your Flask application as you add more functionality or features
