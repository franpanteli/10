-> creating and registering a blueprint in flask
  -> organising project files
      -> place all your project files under a main project folder, making it easier to manage as the application scales
      -> the application factory file should be stored separately in its own location, such as a subfolder like `app/` or `src/`
      -> this keeps the project organised and adheres to flask's recommended project structure, especially for larger applications
      -> in this structure, you can also separate logic into different components such as `models.py`, `views.py`, `forms.py`, etc.
      -> separating logic and resources into their respective directories makes it easier to scale and maintain your app as it grows

  -> creating the main blueprint
      -> use flask's `blueprint` object to create modular components for your app (e.g., a `main` blueprint for general routes)
      -> a blueprint acts as a template that can hold routes, error handlers, and other functions specific to certain parts of the application
      -> creating a blueprint allows you to separate logic into manageable pieces, improving code maintainability and readability
      -> to initialise a blueprint:
          -> call `blueprint` with the name of the blueprint (typically `main` for the main section of the app) and the `__name__` argument
          -> this is similar to initialising a class and passing necessary arguments (like passing variables to a constructor)
      -> example:
          ```python
          from flask import Blueprint
          main = Blueprint('main', __name__)
          ```
      -> this creates a `main` blueprint which will later be registered with the flask app

  -> registering other modules
      -> instead of defining routes directly in the main app file, you will define them within blueprints, keeping the application modular
      -> you will import other modules as needed, including models and controllers, but avoid including form handling logic directly in the main file
      -> defining routes inside a blueprint allows you to logically group related routes together and keeps your code organised
      -> once the routes are placed in the blueprint, the blueprint needs to be registered with the flask application
      -> example:
          ```python
          from app.main import main  # import the main blueprint
          app.register_blueprint(main)  # register the blueprint with the app
          ```

  -> changing urls for blueprint routes
      -> blueprint routes are defined relative to the blueprint’s name, which helps avoid conflicts between routes in different blueprints
      -> you can change the url of a route by providing the blueprint’s name and the function name
      -> for example, in the `main` blueprint, the `index` route is referred to as `main.index` in the application
      -> however, when you're working within the blueprint itself, you can use a shorthand like `.index` instead of `main.index`
      -> this makes it easier to reference routes internally within the blueprint without the need to use the full namespace
      -> example:
          ```python
          @main.route('/')
          def index():
              return 'Hello, World!'
          ```

  -> adding routes to the blueprint
      -> you define routes within the blueprint object using the `@main.route()` decorator, rather than directly with the flask `@app.route()`
      -> once the routes are added to the blueprint, they are linked to the blueprint object, allowing flask to route requests based on blueprint-defined urls
      -> after defining the routes, the blueprint object must replace the flask app object to handle routing
      -> the main flask app should be registered with the blueprint so that flask knows how to manage routes under that blueprint
      -> example:
          ```python
          @main.route('/user/<username>')
          def profile(username):
              return f'Hello, {username}!'
          ```

  -> moving other logic into the blueprint
      -> as your app grows, you can move other functions, such as error handlers or utility functions, into the blueprint
      -> this keeps the application organised by grouping related functionality together (e.g., user authentication, general routes, etc.)
      -> with this separation, the code becomes cleaner, more modular, and easier to debug or extend in the future

  -> moving forms logic to a separate `forms.py` file
      -> to better organise the forms-related logic, move all form handling to a `forms.py` file
      -> the `forms.py` file will contain classes or functions that define form fields, validation logic, and any error handling
      -> this separation allows you to keep the view and route logic free from clutter and lets you focus on functionality within forms
      -> you can import your form classes or functions from `forms.py` into your routes to keep the structure clean
      -> example:
          ```python
          from app.forms import LoginForm
          ```

  -> registering the blueprint with the application
      -> once your blueprint has been created and contains all necessary routes and logic, register it with the flask application
      -> this is done in the application factory, which is a function that creates an instance of the flask app
      -> the `register_blueprint` method links the blueprint to the app, allowing flask to recognise and process routes defined in the blueprint
      -> ensure that the blueprint is properly registered before running the app, so it knows which blueprint to handle for specific routes
      -> example:
          ```python
          def create_app():
              app = Flask(__name__)
              app.register_blueprint(main)  # register the main blueprint with the app
              return app
          ```

  -> resolving remaining imports
      -> after moving the logic into blueprints and restructuring the project files, you will likely encounter import issues
      -> make sure that all the modules (e.g., `models`, `forms`, `views`) are imported correctly into the files where they are needed
      -> circular imports can sometimes be an issue in flask applications, so ensure that you import only what's necessary and use relative imports where possible
      -> example:
          ```python
          from app.main import main
          from app.forms import LoginForm
          ```

  -> setting the flask app environment variable
      -> to run the flask app in the correct environment, set the `flask_app` environment variable to point to the application factory file
      -> this tells flask which file to run when launching the app, and it's essential when you have multiple configuration files or factories
      -> use the following command to set the environment variable:
          ```bash
          export FLASK_APP=your_application.py  # set flask environment variable to the app's file
          ```
      -> additionally, set `flask_env=development` to run flask in development mode, enabling debug features

  -> conclusion
      -> by following these steps, you've created and registered a blueprint, organised your project, and ensured the app is set up correctly
      -> using blueprints allows you to keep routes and logic modular, improving code organisation and scalability
      -> with blueprints, the app becomes easier to extend and maintain as it grows in complexity
      -> the app is now ready for further development, with clean separation of concerns and better maintainability